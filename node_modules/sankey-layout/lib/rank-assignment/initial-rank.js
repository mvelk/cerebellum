'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _set = require('babel-runtime/core-js/set');

var _set2 = _interopRequireDefault(_set);

exports.default = assignInitialRanks;

var _defined = require('defined');

var _defined2 = _interopRequireDefault(_defined);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Take an acyclic graph and assign initial ranks to the nodes
 */
function assignInitialRanks(G) {
  // Place nodes on queue when they have no unmarked in-edges. Initially, this
  // means sources.
  var queue = G.sources(),
      seen = new _set2.default(),
      marked = new _set2.default();

  // Mark any loops, since they don't affect rank assignment
  G.edges().forEach(function (e) {
    if (e.v === e.w) marked.add(e);
  });

  while (queue.length > 0) {
    var v = queue.shift();
    seen.add(v);

    var V = G.node(v);
    if (!V) G.setNode(v, V = {});

    // Set rank to minimum of incoming edges
    V.rank = 0;
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = (0, _getIterator3.default)(G.inEdges(v)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var e = _step.value;

        var delta = (0, _defined2.default)((G.edge(e) || {}).delta, 1);
        V.rank = Math.max(V.rank, G.node(e.v).rank + delta);
      }

      // Mark outgoing edges
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = (0, _getIterator3.default)(G.outEdges(v)), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var _e = _step2.value;

        marked.add(_e);
      }

      // Add nodes to queue when they have no unmarked in-edges.
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
      for (var _iterator3 = (0, _getIterator3.default)(G.nodes()), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
        var n = _step3.value;

        if (queue.indexOf(n) < 0 && !seen.has(n) && !G.inEdges(n).some(function (e) {
          return !marked.has(e);
        })) {
          queue.push(n);
        }
      }
    } catch (err) {
      _didIteratorError3 = true;
      _iteratorError3 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion3 && _iterator3.return) {
          _iterator3.return();
        }
      } finally {
        if (_didIteratorError3) {
          throw _iteratorError3;
        }
      }
    }
  }
}