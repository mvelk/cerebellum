'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.default = materialOrder;

var _lodash = require('lodash.sumby');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function materialOrder(G, u) {
  var incoming = G.inEdges(u),
      outgoing = G.outEdges(u);

  var edgesByMaterial = new Map();
  [].concat(_toConsumableArray(incoming), _toConsumableArray(outgoing)).forEach(function (e) {
    if (!edgesByMaterial.has(e.name)) edgesByMaterial.set(e.name, []);
    edgesByMaterial.get(e.name).push(e);
  });

  var dirs = new Map(Array.from(edgesByMaterial.entries()).map(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2);

    var k = _ref2[0];
    var v = _ref2[1];

    console.log(k, v, G.edge(v[0]));
    var total = (0, _lodash2.default)(v, function (e) {
      return G.edge(e).value;
    }),
        wdirs = (0, _lodash2.default)(v, function (e) {
      return G.edge(e).value * otherY(e);
    });
    return [k, wdirs / total];
  }));

  var mo = Array.from(dirs.keys());

  // XXX This isn't right because the correct order should depend on the order
  // of neighbouring nodes...
  /* mo.sort((a, b) => dirs.get(a) - dirs.get(b)); */
  mo.sort();

  return mo;

  function otherY(e) {
    if (e.v === u) return G.node(e.w).y;
    if (e.w === u) return G.node(e.v).y;
    throw new Error();
  }
}