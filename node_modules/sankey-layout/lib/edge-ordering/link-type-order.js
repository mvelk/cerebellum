'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _from = require('babel-runtime/core-js/array/from');

var _from2 = _interopRequireDefault(_from);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _map = require('babel-runtime/core-js/map');

var _map2 = _interopRequireDefault(_map);

exports.default = linkTypeOrder;

var _lodash = require('lodash.sumby');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function linkTypeOrder(G, u) {
  var incoming = G.inEdges(u),
      outgoing = G.outEdges(u);

  var edgesByType = new _map2.default();
  [].concat((0, _toConsumableArray3.default)(incoming), (0, _toConsumableArray3.default)(outgoing)).forEach(function (e) {
    if (!edgesByType.has(e.name)) edgesByType.set(e.name, []);
    edgesByType.get(e.name).push(e);
  });

  var dirs = new _map2.default((0, _from2.default)(edgesByType.entries()).map(function (_ref) {
    var _ref2 = (0, _slicedToArray3.default)(_ref, 2);

    var k = _ref2[0];
    var v = _ref2[1];

    var total = (0, _lodash2.default)(v, function (e) {
      return G.edge(e).value;
    }),
        wdirs = (0, _lodash2.default)(v, function (e) {
      return G.edge(e).value * otherY(e);
    });
    return [k, wdirs / total];
  }));

  var mo = (0, _from2.default)(dirs.keys());

  // XXX This isn't right because the correct order should depend on the order
  // of neighbouring nodes...
  /* mo.sort((a, b) => dirs.get(a) - dirs.get(b)); */
  mo.sort();

  return mo;

  function otherY(e) {
    if (e.v === u) return G.node(e.w).y;
    if (e.w === u) return G.node(e.v).y;
    throw new Error();
  }
}