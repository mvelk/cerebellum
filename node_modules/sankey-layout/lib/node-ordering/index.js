'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

exports.default = ordering;

var _initialOrdering = require('./initial-ordering');

var _initialOrdering2 = _interopRequireDefault(_initialOrdering);

var _swapNodes = require('./swap-nodes');

var _swapNodes2 = _interopRequireDefault(_swapNodes);

var _countCrossings = require('./count-crossings');

var _countCrossings2 = _interopRequireDefault(_countCrossings);

var _weightedMedian = require('./weighted-median');

var _weightedMedian2 = _interopRequireDefault(_weightedMedian);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Return an ordering for the graph G.
 *
 * The ordering is a list of lists of node ids, corresponding to the ranks of
 * the graphs, and the order of nodes within each rank.
 *
 * @param {Graph} G - The graph. Nodes must have a `rank` attribute.
 *
 */
/** @module node-ordering */

function ordering(G) {
  var maxIterations = arguments.length <= 1 || arguments[1] === undefined ? 25 : arguments[1];

  var order = (0, _initialOrdering2.default)(G),
      best = order,
      i = 0;

  while (i++ < maxIterations) {
    (0, _weightedMedian2.default)(G, order, i % 2 == 0);
    (0, _swapNodes2.default)(G, order);
    if (allCrossings(G, order) < allCrossings(G, best)) {
      // console.log('improved', allCrossings(G, order), order);
      best = copy(order);
    }
  }

  return best;
}

function allCrossings(G, order) {
  var count = 0;
  for (var i = 0; i < order.length - 1; ++i) {
    count += (0, _countCrossings2.default)(G, order[i], order[i + 1]);
  }
  return count;
}

function copy(order) {
  var result = [];
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = (0, _getIterator3.default)(order), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var rank = _step.value;

      var r = [];
      result.push(r);
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = (0, _getIterator3.default)(rank), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var node = _step2.value;
          r.push(node);
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return result;
}