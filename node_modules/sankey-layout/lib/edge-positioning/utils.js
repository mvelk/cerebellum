"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findFirst = findFirst;
exports.sweepCurvatureInwards = sweepCurvatureInwards;
function findFirst(links, p) {
  var jmid = null;
  for (var j = 0; j < links.length; ++j) {
    if (p(links[j])) {
      jmid = j;break;
    }
  }
  return jmid;
}

/**
 * Adjust radii of curvature to avoid overlaps, as much as possible.
 * @param links - the list of links, ordered from outside to inside of bend
 * @param rr - "r0" or "r1", the side to work on
 */
function sweepCurvatureInwards(links, rr) {
  if (links.length === 0) return;

  // sweep from inside of curvature towards outside
  var Rmin = 0,
      h = void 0;
  for (var i = links.length - 1; i >= 0; --i) {
    h = links[i].dy / 2;
    if (links[i][rr] - h < Rmin) {
      // inner radius
      links[i][rr] = Math.min(links[i].Rmax, Rmin + h);
    }
    Rmin = links[i][rr] + h;
  }

  // sweep from outside of curvature towards centre
  var Rmax = links[0].Rmax + links[0].dy / 2;
  for (var _i = 0; _i < links.length; ++_i) {
    h = links[_i].dy / 2;
    if (links[_i][rr] + h > Rmax) {
      // outer radius
      links[_i][rr] = Math.max(h, Rmax - h);
    }
    Rmax = links[_i][rr] - h;
  }
}